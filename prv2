1) Configuração do projeto e banco de dados (SQLite)
a) Estrutura do projeto Flask
Estrutura recomendada:

bash
Copiar código
/meu_projeto
│── app.py
│── models.py
│── forms.py (opcional, se usar WTForms)
│── database.db
│── /templates
│ ├── login.html
│ ├── register.html
│ ├── dashboard.html
│── /static
b) Banco SQLite com tabela User
Vamos usar SQLAlchemy para criar e gerenciar o banco.

models.py

python
Copiar código
from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin

db = SQLAlchemy()

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    password_hash = db.Column(db.String(200), nullable=False)
c) Integração com UserMixin do Flask-Login
Já feita no código acima herdando UserMixin.

2) Configuração do Flask-Login
a) Inicializar o LoginManager
app.py

python
Copiar código
from flask import Flask
from flask_login import LoginManager
from models import db, User

app = Flask(__name__)
app.config['SECRET_KEY'] = 'chave-secreta'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'

db.init_app(app)

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login' # rota de login
b) Implementar load_user
python
Copiar código
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))
3) Cadastro de usuário
a) Rota de cadastro
app.py

python
Copiar código
from flask import render_template, request, redirect, url_for, flash
from werkzeug.security import generate_password_hash

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        # Verificar duplicação
        if User.query.filter_by(username=username).first():
            flash('Usuário já existe!', 'error')
            return redirect(url_for('register'))

        # Criar novo usuário com senha criptografada
        new_user = User(
            username=username,
            password_hash=generate_password_hash(password)
        )
        db.session.add(new_user)
        db.session.commit()
        flash('Usuário cadastrado com sucesso!', 'success')
        return redirect(url_for('login'))

    return render_template('register.html')
4) Login e autenticação
a) Rota de login
python
Copiar código
from flask_login import login_user
from werkzeug.security import check_password_hash

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        user = User.query.filter_by(username=username).first()

        if user and check_password_hash(user.password_hash, password):
            login_user(user)
            return redirect(url_for('dashboard'))
        else:
            flash('Credenciais inválidas', 'error')

    return render_template('login.html')
5) Proteção de rotas
a) Dashboard acessível apenas para usuários logados
python
Copiar código
from flask_login import login_required, current_user

@app.route('/dashboard')
@login_required
def dashboard():
    return render_template('dashboard.html', username=current_user.username)
Se o usuário não estiver logado, será redirecionado automaticamente para /login por conta de login_manager.login_view.

6) Logout
python
Copiar código
from flask_login import logout_user

@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('Logout realizado com sucesso!', 'info')
    return redirect(url_for('login'))
7) Exibição do nome do usuário logado
No dashboard.html:

html
Copiar código
<h1>Bem-vindo, {{ username }}!</h1>
Execução do projeto
1. Instalar dependências
Além do Flask, você precisa instalar:

bash
Copiar código
pip install flask flask_sqlalchemy flask_login werkzeug
2. Criar o banco
No terminal Python:

python
Copiar código
from app import app, db
with app.app_context():
    db.create_all()
3. Rodar o servidor
bash
Copiar código
flask run
Ou:

bash
Copiar código
python app.py
app.py (executável)

python
Copiar código
if __name__ == '__main__':
    app.run(debug=True)
